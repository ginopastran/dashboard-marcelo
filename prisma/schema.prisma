datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Cliente {
  id               String           @id @default(cuid())
  client_name      String
  industry         String
  responsible_name String
  job_title        String
  contact          BigInt
  DNI              BigInt
  email            String?          @unique
  other            String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  presupuestos     Presupuesto[]
  label            EtiquetaCiente[] @relation("ClienteEtiquetas")
  contacts         Contacto[]       @relation("ContactoCliente")
  obras            Obra[]           @relation("ClienteObras")
}

model Contacto {
  id                  String        @id @default(cuid())
  contact_client_name String
  contact_job_title   String
  contact_DNI         BigInt
  contact_contact     BigInt
  contact_email       String?       @unique
  contact_other       String?
  clienteId           String
  cliente             Cliente       @relation("ContactoCliente", fields: [clienteId], references: [id])
  presupuestos        Presupuesto[] // Relación inversa, no se especifica fields ni references aquí
  obras               Obra[]        @relation("ContactoObras") // Relación inversa para Obra
}

model EtiquetaCiente {
  id       String    @id @default(cuid())
  name     String
  clientes Cliente[] @relation("ClienteEtiquetas")
}

enum EstadoPresupuesto {
  Oportunidad
  Adjudicado
  Rechazado
}

enum EstadoObra {
  SinComenzar
  EnProceso
  Finalizado
}

model Presupuesto {
  id                    String                   @id @default(cuid())
  name                  String
  state                 EstadoPresupuesto?
  clienteId             String
  cliente               Cliente                  @relation(fields: [clienteId], references: [id])
  contactId             String?
  contact               Contacto?                @relation(fields: [contactId], references: [id])
  recepcion             DateTime?
  via_recepcion         String?
  detalle               String?
  licitacion            DateTime?
  locacion              String?
  sector                String?
  relevado              String?
  respuesta_presupuesto String?
  revision              String?
  importe               BigInt?
  numero_presupuesto    BigInt?
  via_envio             String?
  seguimientos          SeguimientoPresupuesto[]
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt

  @@index([state])
}

model SeguimientoPresupuesto {
  id            String      @id @default(cuid())
  descripcion   String
  archivoURL    String
  presupuestoId String
  presupuesto   Presupuesto @relation(fields: [presupuestoId], references: [id])
  createdAt     DateTime    @default(now())
}

model Obra {
  id                  String            @id @default(cuid())
  name                String
  numero_obra         BigInt
  numero_presupuesto  BigInt?
  importe             BigInt?
  oc                  BigInt?
  url                 String?
  fecha               DateTime?
  saldo               BigInt?
  porcentajePendiente Int?
  state               EstadoObra
  clienteId           String
  cliente             Cliente           @relation("ClienteObras", fields: [clienteId], references: [id])
  contactId           String?
  contact             Contacto?         @relation("ContactoObras", fields: [contactId], references: [id])
  seguimientos        SeguimientoObra[]
  facturas            FacturaObra[]
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
}

model FacturaObra {
  id                 String    @id @default(cuid())
  obraId             String
  obra               Obra      @relation(fields: [obraId], references: [id])
  fecha_factura      DateTime
  importe            BigInt
  fecha_aceptado     DateTime?
  carga_portal       Int
  fecha_cobro        DateTime?
  nota_credito       BigInt?
  nota_debito        BigInt?
  recordatorio_cobro Int
}

model SeguimientoObra {
  id          String   @id @default(cuid())
  descripcion String
  archivoURL  String
  obraId      String
  obra        Obra     @relation(fields: [obraId], references: [id])
  createdAt   DateTime @default(now())
}
