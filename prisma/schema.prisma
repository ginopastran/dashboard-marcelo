// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Cliente {
  id               String           @id @default(cuid())
  client_name      String
  industry         String
  responsible_name String
  job_title        String
  contact          BigInt
  DNI              BigInt
  email            String?          @unique
  other            String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  presupuestos     Presupuesto[]
  label            EtiquetaCiente[] @relation("ClienteEtiquetas")
  contacts         Contacto[]       @relation("ContactoCliente")
}

model Contacto {
  id                  String  @id @default(cuid())
  contact_client_name String
  contact_job_title   String
  contact_DNI         BigInt
  contact_contact     BigInt
  contact_email       String? @unique
  contact_other       String?
  clienteId           String
  cliente             Cliente @relation("ContactoCliente", fields: [clienteId], references: [id])
}

model EtiquetaCiente {
  id       String    @id @default(cuid())
  name     String
  clientes Cliente[] @relation("ClienteEtiquetas")
}

enum EstadoPresupuesto {
  OPORTUNIDAD
  ADJUDICADO
  RECHAZADO
}

model Presupuesto {
  id        String            @id @default(cuid())
  state     EstadoPresupuesto
  clienteId String
  cliente   Cliente           @relation(fields: [clienteId], references: [id])
}
